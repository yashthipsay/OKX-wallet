"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashMessage = exports.MessageTypes = void 0;
const signUtil = __importStar(require("./sdk/eth-sig-util"));
const ethUtil = __importStar(require("./sdk/ethereumjs-util"));
const crypto_lib_1 = require("@okxweb3/crypto-lib");
var MessageTypes;
(function (MessageTypes) {
    MessageTypes[MessageTypes["ETH_SIGN"] = 0] = "ETH_SIGN";
    MessageTypes[MessageTypes["PERSONAL_SIGN"] = 1] = "PERSONAL_SIGN";
    MessageTypes[MessageTypes["TYPE_DATA_V1"] = 2] = "TYPE_DATA_V1";
    MessageTypes[MessageTypes["TYPE_DATA_V3"] = 3] = "TYPE_DATA_V3";
    MessageTypes[MessageTypes["TYPE_DATA_V4"] = 4] = "TYPE_DATA_V4";
})(MessageTypes = exports.MessageTypes || (exports.MessageTypes = {}));
const hashMessage = (messageType, message) => {
    switch (messageType) {
        case MessageTypes.ETH_SIGN:
            return ethUtil.addHexPrefix(message);
        case MessageTypes.PERSONAL_SIGN: {
            const buffer = crypto_lib_1.base.isHexString(message) ? crypto_lib_1.base.fromHex(message) : Buffer.from(message);
            return ethUtil.addHexPrefix(ethUtil.hashPersonalMessage(buffer).toString('hex'));
        }
        case MessageTypes.TYPE_DATA_V1:
            return ethUtil.addHexPrefix(signUtil.typedSignatureHash(JSON.parse(message)));
        case MessageTypes.TYPE_DATA_V3:
            return ethUtil.addHexPrefix(signUtil.TypedDataUtils.eip712Hash(JSON.parse(message), signUtil.SignTypedDataVersion.V3).toString('hex'));
        case MessageTypes.TYPE_DATA_V4:
            return ethUtil.addHexPrefix(signUtil.TypedDataUtils.eip712Hash(JSON.parse(message), signUtil.SignTypedDataVersion.V4).toString('hex'));
        default:
            throw new Error(`Invalid messageType: ${messageType}`);
    }
};
exports.hashMessage = hashMessage;
//# sourceMappingURL=message.js.map